<A> = <B>	<A> に <B> を代入する
<A> = <B>	<A> を <B> とする
<A> = <B>	<A> イコール <B>
<A> = <B>	<A> イコール <B> とする
<A> = <B>	<A> に <B> を代入する
<A> = <B>	<B> を <A> に代入する
<A> + <B>	<A> に <B> を加えた値
<A> + <B>	<A> に <B> を加えた値を算出する
<A> + <B>	<A> プラス <B>
<A> + <B>	<A> たす <B> を計算する
<A> + <B>	<A> と <B> の和
<A> + <B>	<A> と <B> の和を算出する
<A> - <B>	<A> から <B> を引いた値
<A> - <B>	<A> から <B> を引いた値を求める
<A> - <B>	<A> マイナス <B>
<A> - <B>	<A> 引く <B> を算出する
<A> - <B>	<A> と <B> の差
<A> - <B>	<A> と <B> の差を算出する
<A> * <B>	<A> に <B> をかけた値
<A> * <B>	<A> に <B> をかけた値を算出する
<A> * <B>	<A> 掛ける <B>
<A> * <B>	<A> かける <B> を計算する
<A> * <B>	<A> と <B> の積
<A> * <B>	<A> と <B> の積を求める
<A> / <B>	<A> を <B> でわった値
<A> / <B>	<A> を <B> でわった値を求める
<A> / <B>	<A> わる <B>
<A> / <B>	<A> 割る <B> を求める
<A> / <B>	<A> と <B> の商
<A> / <B>	<A> と <B> の商を計算する
<A> / <B>	<B> 分の <A>
<A> / <B>	<B> 分の <A> を計算する
<A> // <B>	<A> を <B> でわった値の整数部分
<A> // <B>	<A> を <B> でわった値の整数部分を計算する
<A> ** 2	<A> の二乗
<A> ** <B>	<A> の <B> 乗を算出する
<A> % <B>	<A> を <B> で割った余り
<A> % <B>	<A> を <B> で割った余りを計算する
<A> % <B>	<A> を <B> で剰余
<A> % <B>	<A> を <B> で剰余を計算する
<A> % <B>	<A> と <B> の mod
<A> % <B>	<A> と <B> の mod を求める
<A> % <B>	<A> と <B> の割り算の余り
<A> % <B>	<A> と <B> の割り算の余りを算出する
( <A> + <B> - 1 ) // <B>	<A> を <B> で割った結果の切り上げ
( <A> + <B> - 1 ) // <B>	<A> を <B> でわった結果の切り上げを求める
( <A> + <B> - 1 ) // <B>	<A> 割る <B> を切り上げる
( <A> + <B> - 1 ) // <B>	<A> 割る <B> の切り上げ
( <A> + <B> - 1 ) // <B>	<A> 割る <B> の切り上げを算出する
( <A> + <B> - 1 ) // <B>	<A> を <B> でわった値を切り上げる
<A> & <B>	<A> と <B> の論理積
<A> & <B>	<A> と <B> の論理積を算出する
<A> | <B>	<A> と <B> の論理和
<A> | <B>	<A> と <B> の論理和を計算する
x ^ <A>	a と <A> の排他的論理和
x ^ <A>	a と <A> の排他的論理和を計算する
<A> << <B>	<A> を <B> だけシフトした左シフト値
<A> << <B>	<A> を <B> だけシフトした左シフト値を求める
<A> >> <B>	<A> を <B> だけシフトした右シフト値
<A> >> <B>	<A> を <B> だけシフトした右シフト値を算出する
<A> += <B>	<A> を <B> だけ増加させる
<A> += <B>	<A> に <B> を足して代入する
<A> += <B>	<A> と <B> の値を足して <A> に代入する
<A> += <B>	<A> たす <B> の値を <A> に代入する
<A> -= <B>	<A> を <B> だけ減少させる
<A> -= <B>	<A> から <B> の値を引いて <A> に代入する
<A> -= <B>	<A> ひく <B> の値を <A> に代入する
<A> *= <B>	<A> を <B> 倍にする
<A> *= <B>	<A> に <B> をかけた値を <A> に代入する
<A> ** = <B>	<A> を <B> 乗する
<A> /= <B>	<A> を <B> 分の一にする
<A> // = <B>	<A> を <B> 分の一にする
<A> % = <B>	<A> を <B> で割った余りを <A> に代入する
abs ( <A> )	<A> の絶対値
abs ( <A> )	<A> の絶対値を計算する
complex ( <A> )	<A> の複素数
complex ( <A> )	<A> の複素数を計算する
complex ( <A> , <B> )	<A> を実部 <B> を虚部とした複素数
complex ( <A> , <B> )	<A> を実部 <B> を虚部とした複素数を求める
divmod ( <A> , <B> )	<A> を <B> で割ったときの商と剰余の組
divmod ( <A> , <B> )	<A> を <B> で割ったときの商とあまりの組を求める
divmod ( <A> , <B> )	<A> と <B> の商と剰余の組
divmod ( <A> , <B> )	<A> と <B> の商と剰余の組を求める
hash ( <A> )	<A> のハッシュ値
hash ( <A> )	<A> のハッシュ値を算出する
pow ( <A> , <B> )	<A> の <B> 乗
pow ( <A> , <B> )	<A> の <B> 乗を求める
pow ( <A> , <B> , <C> )	<A> の <B> 乗に対する <C> の剰余
pow ( <A> , <B> , <C> )	<A> の <B> 乗に対する <C> の剰余を計算する
pow ( <A> , <B> , <C> )	<A> の <B> 乗を <C> で割った余り
pow ( <A> , <B> , <C> )	<A> の <B> 乗を <C> で割った余りを算出する
round ( <A> )	<A> の小数点を丸めた値
round ( <A> )	<A> の小数点を丸めた値を計算する
round ( <A> )	<A> の整数値
round ( <A> )	<A> の整数値を求める
round ( <A> , 1 )	<A> を小数点第一位までに丸めた値
round ( <A> , 1 )	<A> を小数点第一位までに丸めた値を求める
round ( <A> , -1 )	<A> を十の位までに丸めた値
round ( <A> , -1 )	<A> を十の位までに丸めた値を計算する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で一番大きい値
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で一番大きい値を算出する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大値
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大値を算出する
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で一番小さい値
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で一番小さい値を算出する
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小値
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小値を求める
del <A>	<A> をデリートする
global <A>	<A> をグローバル変数とする
nonlocal <A>	<A> を非ローカル変数とする
float ( <A> )	<A> を浮動小数点数に変換する
<A> = float ( <B> )	<B> を浮動小数点数にし、 <A> とする
<A> = float ( <B> )	<B> を浮動小数点数にした結果を <A> にする
float ( <A> )	<A> を変換した浮動小数点数
<A> = float ( <B> )	<B> を変換した浮動小数点数を <A> にする
float ( <A> )	<A> を浮動小数点数型として得る
<A> = float ( <B> )	<B> を浮動小数点数型として得、 <A> に代入する
<A> = float ( <B> )	<B> を浮動小数点数型として得た結果を <A> に代入する
int ( <A> )	<A> を整数型にする
<A> = int ( <B> )	<B> を整数に変換し、 <A> にする
<A> = int ( <B> )	<B> を整数に変換した結果を <A> に代入する
int ( <A> )	<A> を変換した整数
<A> = int ( <B> )	<B> を変換した整数を <A> に代入する
int ( <A> )	<A> を整数型として得る
<A> = int ( <B> )	<B> を整数型として得、 <A> とする
<A> = int ( <B> )	<B> を整数型として得た結果を <A> に代入する
str ( <A> )	<A> を文字列型に変換する
<A> = str ( <B> )	<B> を文字列に変換して、 <A> にする
<A> = str ( <B> )	<B> を文字列に変換した結果を <A> とする
str ( <A> )	<A> を変換した文字列
<A> = str ( <B> )	<B> を変換した文字列を <A> とする
str ( <A> )	<A> を文字列型として取得する
<A> = str ( <B> )	<B> を文字列型として取得し、 <A> に代入する
<A> = str ( <B> )	<B> を文字列型として取得した結果を <A> にする
list ( <A> )	<A> のリスト
<A> = list ( <B> )	<B> のリストを <A> にする
list ( <A> )	<A> をリストに変換する
<A> = list ( <B> )	<B> をリスト型に変換して、 <A> に代入する
<A> = list ( <B> )	<B> をリスト型に変換された結果を <A> とする
list ( <A> )	<A> をリスト型として取得する
<A> = list ( <B> )	<B> をリスト型として取得して、 <A> にする
<A> = list ( <B> )	<B> をリスト型として取得された結果を <A> にする
type ( <A> )	<A> のタイプ
type ( <A> )	<A> のタイプを抽出する
type ( <A> )	<A> のタイプを見る
<A> == <B>	<A> と <B> が等しいかどうか
<A> != <B>	<A> と <B> が等しくないかどうか
if <A> == <B> :	もし <A> と <B> が等しい場合
if <A> != <B> :	もし <A> と <B> が等しくないならば
while <A> == <B> :	<A> と <B> が等しい間
while <A> != <B> :	<A> と <B> が等しくない間
<A> == <B>	<A> が <B> と等しいかどうか
<A> != <B>	<A> が <B> と等しくないかどうか
if <A> == <B> :	もし <A> が <B> と等しいならば
if <A> != <B> :	<A> が <B> と等しくないなら
while <A> == <B> :	<A> が <B> と等しい間
while <A> != <B> :	<A> が <B> と等しくない間
<A> == <B>	<A> が <B> かどうか
<A> != <B>	<A> が <B> でないかどうか
if <A> == <B> :	<A> が <B> の場合
if <A> != <B> :	もし <A> が <B> でないなら
while <A> == <B> :	<A> が <B> の間
while <A> != <B> :	<A> が <B> でない間
<A> > <B>	<A> が <B> より大きいかどうか
not <A> > <B>	<A> が <B> より大きくないかどうか
if <A> > <B> :	<A> が <B> より大きいとき
if not <A> > <B> :	もし <A> が <B> より大きくないならば
while <A> > <B> :	<A> が <B> より大きい間
while not <A> > <B> :	<A> が <B> より大きくない間
<A> > <B>	<A> が <B> よりも大きいかどうか
not <A> > <B>	<A> が <B> よりも大きくないかどうか
if <A> > <B> :	もし <A> が <B> よりも大きいなら
if not <A> > <B> :	もし <A> が <B> よりも大きくないならば
while <A> > <B> :	<A> が <B> よりも大きい間
while not <A> > <B> :	<A> が <B> よりも大きくない間
<A> < <B>	<A> が <B> より小さいかどうか
not <A> < <B>	<A> が <B> より小さくないかどうか
if <A> < <B> :	もし <A> が <B> より小さいならば
if not <A> < <B> :	もし <A> が <B> より小さくないとき
while <A> < <B> :	<A> が <B> より小さい間
while not <A> < <B> :	<A> が <B> より小さくない間
<A> < <B>	<A> が <B> よりも小さいかどうか
not <A> < <B>	<A> が <B> よりも小さくないかどうか
if <A> < <B> :	<A> が <B> よりも小さいとき
if not <A> < <B> :	<A> が <B> よりも小さくない場合
while <A> < <B> :	<A> が <B> よりも小さい間
while not <A> < <B> :	<A> が <B> よりも小さくない間
<A> >= <B>	<A> が <B> 以上かどうか
not <A> >= <B>	<A> が <B> 以上でないかどうか
if <A> >= <B> :	もし <A> が <B> 以上の場合
if not <A> >= <B> :	もし <A> が <B> 以上でないならば
while <A> >= <B> :	<A> が <B> 以上の間
while not <A> >= <B> :	<A> が <B> 以上でない間
<A> <= <B>	<A> が <B> 以下かどうか
not <A> <= <B>	<A> が <B> 以下でないかどうか
if <A> <= <B> :	もし <A> が <B> 以下ならば
if not <A> <= <B> :	もし <A> が <B> 以下でないならば
while <A> <= <B> :	<A> が <B> 以下の間
while not <A> <= <B> :	<A> が <B> 以下でない間
<A> % 2 == 0	<A> が偶数かどうか
<A> % 2 != 0	<A> が偶数でないかどうか
if <A> % 2 == 0 :	もし <A> が偶数の場合
if <A> % 2 != 0 :	<A> が偶数でないなら
<A> % <B> == <C>	<A> が <B> で割った時の余りが <C> であるかどうか
<A> % <B> != <C>	<A> が <B> で割った時の余りが <C> であるでないかどうか
if <A> % <B> == <C> :	<A> が <B> で割った時の余りが <C> であるならば
if <A> % <B> != <C> :	もし <A> が <B> で割った時の余りが <C> であるでない場合
<A> % 2 == 1	<A> が奇数かどうか
<A> % 2 != 1	<A> が奇数でないかどうか
if <A> % 2 == 1 :	もし <A> が奇数の場合
if <A> % 2 != 1 :	もし <A> が奇数でないならば
<A> % <B> == <C>	<A> が <B> で割った時の余りが <C> かどうか
<A> % <B> != <C>	<A> が <B> で割った時の余りが <C> でないかどうか
if <A> % <B> == <C> :	もし <A> が <B> で割った時の余りが <C> ならば
if <A> % <B> != <C> :	もし <A> が <B> で割った時の余りが <C> でないならば
<A> % <B> == 0	<A> が <B> の倍数かどうか
<A> % <B> != 0	<A> が <B> の倍数でないかどうか
if <A> % <B> == 0 :	もし <A> が <B> の倍数ならば
if <A> % <B> != 0 :	<A> が <B> の倍数でないとき
<A> % <B> == 0	<A> が <B> で割り切れるかどうか
<A> % <B> != 0	<A> が <B> で割り切れるでないかどうか
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるならば
if <A> % <B> != 0 :	もし <A> が <B> で割り切れるでないとき
<A> and <B>	<A> かつ <B>
not <A> and <B>	<A> かつ <B> でない
if <A> and <B> :	もし <A> かつ <B> のとき
if not <A> and <B> :	もし <A> かつ <B> でないなら
<A> or <B>	<A> または <B>
not <A> or <B>	<A> または <B> でない
if <A> or <B> :	もし <A> または <B> のとき
if not <A> or <B> :	もし <A> または <B> でない場合
not <A>	<A> ではない
not not <A>	<A> ではなくない
if not <A> :	もし <A> ではないとき
if not not <A> :	もし <A> ではなくないとき
True	真
False	偽
None	未定値
print ( )	改行を表示する
print ( )	空行を出力する
print ( <A> )	<A> を表示する
print ( <A> , end = '' )	改行なしで <A> をプリントする
print ( <A> , end = '' )	<A> の出力を改行しないで行う
print ( <A> , sep = '' )	区切りなしで <A> をプリントする
print ( <A> , sep = '' )	<A> の出力を区切らないで行う
print ( <A> , sep = ',' )	カンマ区切りで <A> をプリントする
print ( <A> , sep = <B> )	<B> 区切りで <A> をプリントする
print ( <A> , sep = ',' )	<A> の出力をカンマ区切りで行う
print ( <A> )	<A> とプリントする
print ( 'Hello World' )	「ハローワールド」とプリントする
print ( 'Hello World' )	試しに何か動かす
print ( 'Hello World' )	最初のプログラム
print ( '{:.5f}' . format ( <A> ) )	<A> の小数点以下 5 桁までをプリントする
print ( '{:.5f}' . format ( <A> ) )	<A> の小数点以下を 5 桁までプリントする
print ( '{:.5f}' . format ( <A> ) )	<A> の小数点以下を 5 桁で揃える
print ( '{:.5f}' . format ( <A> ) )	<A> の小数部を 5 桁で丸める
print ( * <A> )	<A> を展開してプリントする
input ( )	ユーザから入力を受け取る
<A> = input ( )	ユーザから入力を受け取って、 <A> に代入する
<A> = input ( )	ユーザから入力を受け取った結果を <A> にする
input ( )	入力値を受け取る
<A> = input ( )	入力値を受け取って、 <A> とする
<A> = input ( )	入力値を受け取った結果を <A> とする
input ( )	ユーザが入力した文字列
<A> = input ( )	ユーザが入力した文字列を <A> にする
input ( )	ユーザから入力された文字列
<A> = input ( )	ユーザから入力された文字列を <A> に代入する
input ( )	入力された文字列
<A> = input ( )	入力された文字列を <A> に代入する
input ( )	文字列を入力する
<A> = input ( )	文字列を入力して、 <A> に代入する
<A> = input ( )	文字列を入力した結果を <A> にする
input ( )	データを入力する
<A> = input ( )	データを入力して、 <A> に代入する
<A> = input ( )	データを入力した結果を <A> とする
int ( input ( ) )	ユーザから入力を整数値として受け取る
<A> = int ( input ( ) )	ユーザから入力を数字として受け取り、 <A> にする
<A> = int ( input ( ) )	ユーザから入力を数字として受け取られた結果を <A> に代入する
int ( input ( ) )	整数値を受け取る
<A> = int ( input ( ) )	整数値を受け取って、 <A> とする
<A> = int ( input ( ) )	整数値を受け取った結果を <A> に代入する
int ( input ( ) )	ユーザが入力した整数値
<A> = int ( input ( ) )	ユーザが入力した整数値を <A> とする
int ( input ( ) )	ユーザから入力された整数値
<A> = int ( input ( ) )	ユーザから入力された整数値を <A> に代入する
int ( input ( ) )	入力された整数値
<A> = int ( input ( ) )	入力された整数値を <A> とする
int ( input ( ) )	整数値を入力する
<A> = int ( input ( ) )	整数値を入力し、 <A> とする
<A> = int ( input ( ) )	整数値を入力した結果を <A> にする
int ( input ( ) )	数値データを入力する
<A> = int ( input ( ) )	数値データを入力し、 <A> に代入する
<A> = int ( input ( ) )	数値データを入力した結果を <A> とする
list ( input ( ) )	複数の入力値をリストとして受け取る
<A> = list ( input ( ) )	複数の入力値をリストとして受け取り、 <A> に代入する
<A> = list ( input ( ) )	複数の入力値をリストとして受け取った結果を <A> に代入する
list ( input ( ) )	ユーザが入力したデータをリストに入れる
<A> = list ( input ( ) )	ユーザが入力したデータをリストに突っ込んで、 <A> に代入する
<A> = list ( input ( ) )	ユーザが入力したデータをリストに突っ込んだ結果を <A> に代入する
list ( input ( ) )	ユーザが入力したデータをリストに変換する
<A> = list ( input ( ) )	ユーザが入力した値をリストに変換し、 <A> に代入する
<A> = list ( input ( ) )	ユーザが入力した値をリストに変換した結果を <A> に代入する
list ( input ( ) )	ユーザが入力した値をリスト化する
<A> = list ( input ( ) )	ユーザが入力した値をリスト化し、 <A> にする
<A> = list ( input ( ) )	ユーザが入力した値をリスト化した結果を <A> とする
list ( map ( int , input ( ) . split ( ) ) )	空白ごとに入力された複数の整数をリストとして受け取る
<A> = list ( map ( int , input ( ) . split ( ) ) )	空白ごとに入力された複数の整数をリストとして受け取り、 <A> に代入する
<A> = list ( map ( int , input ( ) . split ( ) ) )	空白ごとに入力された複数の整数をリストとして受け取られた結果を <A> に代入する
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値をスペースで区切ってリストとして受け取る
<A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値をスペースで区切ってリストとして受け取り、 <A> に代入する
<A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値をスペースで区切ってリストとして受け取られた結果を <A> にする
<A> , <B> , <C> = input ( ) . split ( )	入力された文字列を半角スペースで分割し <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	空白ごとに入力文字列を受け取り <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	半角スペースで区切って入力文字列を受け取り <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	入力された整数値を半角スペースで分割し <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	半角スペースごとに入力された整数値を受け取り <A> 、 <B> 、 <C> とする
if <A> == <B> :	<A> が <B> ならば
if <A> == <B> :	もし <A> が <B> ならば
elif <A> == <B> :	そうでなくて <A> が <B> ならば
else	そうでなければ
else	どれでもなければ
else	それ以外のとき
if <A> < <B> or <A> >= <C> :	<A> が <B> 未満または <C> 以上ならば
if <A> < <B> or <A> >= <C> :	もし <A> が <B> 未満または <C> 以上ならば
if <A> < <B> and <A> >= <C> :	<A> が <B> 未満かつ <C> 以上ならば
if <A> < <B> and <A> >= <C> :	もし <A> が <B> 未満かつ <C> 以上ならば
for i in range ( <A> ) :	以下の処理を <A> 回ループする
for i in range ( <A> ) :	<A> 回ループする
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以降のプログラムをループする
for <A> in range ( <B> ) :	<A> に <B> 未満の連続した数値を代入して、以降のプログラムをループする
for <A> in range ( 10 ) :	<A> を 0 から 9 まで 1 つずつ取り出しながら繰り返し処理を行う
for i in range ( <A> ) :	繰り返し処理を <A> 回行う
for i in range ( <A> ) :	<A> 回だけ繰り返し処理を行う
for i in range ( len ( <A> ) ) :	以降のプログラムを <A> の長さだけループする
for <A> , <B> in enumerate ( <C> ) :	<C> のインデックスを <A> 、要素を <B> へ順番に代入して以降のプログラムをループする
for <A> , <B> in zip ( <C> , <D> ) :	<C> の要素を <A> 、 <D> の要素を <B> へ順番に代入して以降のプログラムをループする
while True :	以下の処理をずっとループする
while True :	無限ループを行う
pass	何もしない
pass	何も行わない
pass	パスする
break	抜ける
break	中断する
break	ループ処理を終了する
break	繰り返し処理から抜け出す
continue	先頭に戻ってやり直す
continue	最初から繰り返す
try :	可能なら以下のプログラムを実行する
except :	もし何らかの例外が発生した場合
except :	もし try の中のプログラムが実行できなかった時
except <A> :	もし <A> が発生したとき
finally :	例外が発生してもしなくても
def <A> ( <B> ) :	<B> を引数に持つ関数 <A> を定義する
def <A> ( <B> ) :	<B> を引数に持つ関数を <A> という名前で定義する
return	何も返さない
return <A>	<A> をリターンする
yield <A>	<A> を一旦リターンする
[ ]	空列
<A> = [ ]	空列を <A> にする
[ ]	空のリスト
<A> = [ ]	空のリストを <A> にする
( )	空のタプル
<A> = ( )	空のタプルを <A> にする
<A> [ 0 ]	<A> の最初の要素
<A> [ -1 ]	<A> の末尾の要素
<A> [ : ]	<A> のコピー
<A> [ : ]	<A> がコピーされた列
<A> [ : -1 ]	<A> の最後を除いた部分列
<A> [ 1 : ]	<A> の最初を除いた部分列
<A> [ <B> : <C> ]	<A> の <B> 番目から <C> 番目の要素を得る
<A> [ <B> : ]	<A> の <B> 番目から末尾までの要素を取り出す
<A> [ <B> : ]	<A> の <B> 番目以降の値を取り出す
<A> [ : <B> ]	<A> の 0 番目から <B> 番目の要素を取り出す
<A> [ : : -1 ]	<A> の逆順
<A> [ : : -1 ]	<A> 内の要素の順番を逆にする
len ( <A> )	<A> の長さ
len ( <A> )	<A> の長さを見る
len ( <A> )	<A> の長さを算出する
sum ( <A> )	<A> の合計
sum ( <A> )	<A> の合計を確認する
sum ( <A> )	<A> の合計値を計算する
min ( <A> )	<A> の一番小さい値
min ( <A> )	<A> の一番小さい値をチェックする
min ( <A> )	<A> の最小値を求める
max ( <A> ) @check @calc	<A> の一番大きい値
sum ( <A> ) / len ( <A> )	<A> の平均
sum ( <A> ) / len ( <A> )	<A> の平均値を調べる
sum ( <A> ) / len ( <A> )	<A> の平均を計算する
range ( <A> )	0 から <A> -1 までの数列
range ( <A> )	0 から <A> -1 の範囲の数列
range ( <A> )	0 から <A> -1 の範囲で 1 ずつ増える数列
range ( <A> )	0 ~ <A> -1 の範囲の数列
range ( <A> )	0 ~ <A> -1 の範囲で 1 ずつ増える数列
range ( <A> )	0 以上 <A> 未満の範囲で 1 ずつ増える数列
range ( <A> )	0 以上 <A> 未満の範囲の数列
range ( <A> , <B> + <A> )	<A> から <B> までの数列
range ( <A> , <B> + <A> )	<A> から <B> の範囲の数列
range ( <A> , <B> + <A> )	<A> から <B> の範囲で <A> ずつ増える数列
range ( <A> , <B> + <A> )	<A> ~ <B> の範囲の数列
range ( <A> , <B> + <A> )	<A> ~ <B> の範囲で <A> ずつ増える数列
range ( <A> , <B> + <A> )	<A> 以上 <B> + <A> 未満の範囲で <A> ずつ増える数列
range ( <A> , <B> + <A> , <C> )	<A> から <B> までの <C> つ飛ばしの数列
range ( <A> , <B> + <A> , <C> )	<A> から <B> の範囲の <C> つ飛ばしの数列
range ( <A> , <B> + <A> , <C> )	<A> から <B> の範囲で <C> つずつ増える数列
range ( <A> , <B> + <A> , <C> )	<A> ~ <B> の範囲の <C> つ飛ばしの数列
range ( <A> , <B> + <A> , <C> )	<A> ~ <B> の範囲で <C> ずつ増える数列
range ( <A> , <B> + <A> , <C> )	<A> 以上 <B> + <A> 未満の範囲で <C> ずつ増える数列
<A> . append ( <B> )	<A> に <B> を追加する
<A> . append ( <B> )	<A> の最後に <B> をアペンドする
<A> . extend ( <B> )	<A> に <B> を展開して入れる
<A> . extend ( <B> )	<B> を追加して <A> を拡張する
<A> . insert ( <B> , <C> )	<A> の <B> 番目に <C> を追加する
<A> . pop ( )	<A> の末尾から値をポップする
<A> . pop ( <B> )	<A> の <B> 番目から要素をポップする
<A> . clear ( )	<A> の全ての要素を削除する
<A> . remove ( <B> )	<A> 内の <B> と等しい要素の先頭を取り除く
del <A> [ <B> ]	<A> の <B> 番目の要素を取り除く
<A> . index ( <B> )	<A> 内の <B> が存在する先頭のインデックスを取得する
<A> . sort ( )	<A> を昇順にソートする
<A> = <B> . sort ( )	<B> を昇順にソートし、 <A> に代入する
<A> = <B> . sort ( )	<B> を昇順にソートした結果を <A> にする
<A> . sort ( reverse = True )	<A> を降順にソートする
<A> = <B> . sort ( reverse = True )	<B> を降順にソートして、 <A> にする
<A> = <B> . sort ( reverse = True )	<B> を降順にソートした結果を <A> にする
<A> . reverse ( )	<A> を降順にする
<A> = <B> . reverse ( )	<B> を降順にして、 <A> とする
<A> = <B> . reverse ( )	<B> を降順にされた結果を <A> に代入する
<A> . copy ( )	<A> のコピー
<A> = <B> . copy ( )	<B> のコピーを <A> に代入する
sorted ( <A> )	<A> を昇順にソートする
sorted ( <A> )	<A> を昇順にソートした列
sorted ( <A> , reverse = True )	<A> を降順にソートする
sorted ( <A> , reverse = True )	<A> を降順にソートした列
sorted ( <A> , key = <B> )	<A> に <B> 関数を適用してソートする
sorted ( <A> , key = abs )	<A> を絶対値に直してソートする
sorted ( <A> , key = abs )	<A> を絶対値に直してソートした列
sorted ( <A> , key = abs )	<A> の各要素の絶対値でソートする
reversed ( <A> )	<A> を降順にする
reversed ( <A> )	<A> をリバースした列
all ( <A> )	<A> 内の全ての要素が真かどうか
all ( <A> )	<A> 内の要素が全て真かどうか
any ( <A> )	<A> 内の少なくともひとつの要素が真かどうか
any ( <A> )	<A> 内の要素が少なくともひとつは真かどうか
[ <A> for i in range ( <B> ) ]	<B> 個の <A> が含まれるリスト
<A> = [ <B> for i in range ( <C> ) ]	<C> 個の <B> が含まれるリストを <A> にする
[ i for i in range ( <A> , 101 ) ]	<A> から 100 までの数が並んだリスト
<A> = [ i for i in range ( <B> , 101 ) ]	<B> から 100 までの数が並んだリストを <A> に代入する
[ i for i in range ( <A> , <B> ) ]	<A> 以上 <B> 未満の数が並んだリスト
<A> = [ i for i in range ( <B> , <C> ) ]	<B> 以上 <C> 未満の数が並んだリストを <A> とする
''	空文字
'\n'	改行文字
'\n'	改行
'\t'	タブ文字
'\t'	タブ
' '	空白文字
' '	空白
chr ( <A> )	文字コード <A> の文字
ord ( <A> )	<A> の文字コード
bin ( <A> )	<A> の 2 進数文字列
oct ( <A> )	<A> の 8 進数表現
hex ( <A> )	<A> の 16 進数表現
<A> . to_bytes ( )	<A> のバイト列
byteorder = 'big'	ビッグエンディアンとして
byteorder = 'little'	リトルエンディアンとして
<A> . from_bytes ( )	バイト列 <A> からの整数値
<A> . is_integer ( )	<A> が整数かどうか
<A> . upper ( )	<A> を英大文字に変換した文字列
<A> = <B> . upper ( )	<B> を英大文字に変換した文字列を <A> に代入する
<A> . upper ( )	<A> 内の小文字を大文字にする
<A> = <B> . upper ( )	<B> 内の小文字を大文字に変換して、 <A> とする
<A> = <B> . upper ( )	<B> 内の小文字を大文字に変換した結果を <A> にする
<A> . upper ( )	<A> を全て大文字に変換する
<A> = <B> . upper ( )	<B> を全て大文字に変換し、 <A> に代入する
<A> = <B> . upper ( )	<B> を全て大文字に変換した結果を <A> とする
<A> . lower ( )	<A> を英小文字に変換した文字列
<A> = <B> . lower ( )	<B> を英小文字に変換した文字列を <A> に代入する
<A> . lower ( )	<A> 内の大文字を小文字に変換する
<A> = <B> . lower ( )	<B> 内の大文字を小文字に直し、 <A> とする
<A> = <B> . lower ( )	<B> 内の大文字を小文字に直された結果を <A> にする
<A> . lower ( )	<A> を全て小文字に変換する
<A> = <B> . lower ( )	<B> を全て小文字に変換し、 <A> に代入する
<A> = <B> . lower ( )	<B> を全て小文字に変換した結果を <A> にする
list ( <A> )	<A> の文字リスト
<A> = list ( <B> )	<B> の文字リストを <A> とする
<A> . split ( )	<A> を空白で分割した文字列のリスト
<A> = <B> . split ( )	<B> を空白で分割した文字列のリストを <A> とする
<A> . split ( )	<A> を空白で分割してリストを返す
<A> = <B> . split ( )	<B> を空白で分割してリストを返し、 <A> にする
<A> = <B> . split ( )	<B> を空白で分割してリストを返した結果を <A> に代入する
<A> . split ( )	空白を区切り文字として <A> を分割した結果をリスト型にして返す
<A> = <B> . split ( )	空白を区切り文字として <B> を分割した結果をリスト型にして返し、 <A> にする
<A> = <B> . split ( )	空白を区切り文字として <B> を分割した結果をリスト型にして返した結果を <A> とする
<A> . split ( <B> )	<A> を <B> で分割した文字列のリスト
<A> = <B> . split ( <C> )	<B> を <C> で分割した文字列のリストを <A> にする
<A> . split ( <B> )	<A> を <B> で分割してリストを返す
<A> = <B> . split ( <C> )	<B> を <C> で分割してリストを返し、 <A> にする
<A> = <B> . split ( <C> )	<B> を <C> で分割してリストを返した結果を <A> とする
<A> . split ( <B> )	<B> を区切り文字として <A> を分割した結果をリスト型にして返す
<A> = <B> . split ( <C> )	<C> を区切り文字として <B> を分割した結果をリスト型にして返して、 <A> に代入する
<A> = <B> . split ( <C> )	<C> を区切り文字として <B> を分割した結果をリスト型にして返した結果を <A> にする
<A> . split ( <B> , <C> )	<A> を <B> で最大分割数 <C> まで分割した文字列のリスト
<A> = <B> . split ( <C> , <D> )	<B> を <C> で最大分割数 <D> まで分割した文字列のリストを <A> に代入する
<A> . split ( <B> , <C> )	<A> を <B> で最大分割数 <C> まで分割してリストを返す
<A> = <B> . split ( <C> , <D> )	<B> を <C> で最大分割数 <D> まで分割してリストを返して、 <A> にする
<A> = <B> . split ( <C> , <D> )	<B> を <C> で最大分割数 <D> まで分割してリストを返した結果を <A> に代入する
<A> . split ( <B> , <C> )	<B> を区切り文字、最大分割数を <C> として <A> を分割した結果をリスト型にして返す
<A> = <B> . split ( <C> , <D> )	<C> を区切り文字、最大分割数を <D> として <B> を分割した結果をリスト型にして返し、 <A> にする
<A> = <B> . split ( <C> , <D> )	<C> を区切り文字、最大分割数を <D> として <B> を分割した結果をリスト型にして返した結果を <A> とする
<A> . rsplit ( )	<A> を末尾から空白で分割した文字列のリスト
<A> = <B> . rsplit ( )	<B> を最後から空白で分割した文字列のリストを <A> とする
<A> . rsplit ( )	<A> を末尾から空白で分割してリストを返す
<A> = <B> . rsplit ( )	<B> を末尾から空白で分割してリストを返し、 <A> とする
<A> = <B> . rsplit ( )	<B> を末尾から空白で分割してリストを返した結果を <A> に代入する
<A> . rsplit ( )	空白を区切り文字として <A> を末尾から分割してリスト型にして返す
<A> = <B> . rsplit ( )	空白を区切り文字として <B> を最後から分割してリスト型にして返して、 <A> に代入する
<A> = <B> . rsplit ( )	空白を区切り文字として <B> を最後から分割してリスト型にして返された結果を <A> とする
<A> . rsplit ( <B> )	<A> を末尾から <B> で分割した文字列のリスト
<A> = <B> . rsplit ( <C> )	<B> を末尾から <C> で分割した文字列のリストを <A> とする
<A> . rsplit ( <B> )	<A> を末尾から <B> で分割してリストを返す
<A> = <B> . rsplit ( <C> )	<B> を末尾から <C> で分割してリストを返し、 <A> に代入する
<A> = <B> . rsplit ( <C> )	<B> を末尾から <C> で分割してリストを返した結果を <A> に代入する
<A> . rsplit ( <B> )	<B> を区切り文字として <A> を最後から分割してリスト型にして返す
<A> = <B> . rsplit ( <C> )	<C> を区切り文字として <B> を末尾から分割してリスト型にして返して、 <A> にする
<A> = <B> . rsplit ( <C> )	<C> を区切り文字として <B> を末尾から分割してリスト型にして返した結果を <A> に代入する
<A> . rsplit ( <B> , <C> )	<A> を末尾から <B> で最大分割数 <C> まで分割した文字列のリスト
<A> = <B> . rsplit ( <C> , <D> )	<B> を最後から <C> で最大分割数 <D> まで分割した文字列のリストを <A> に代入する
<A> . rsplit ( <B> , <C> )	<A> を末尾から <B> で最大分割数 <C> まで分割してリストを返す
<A> = <B> . rsplit ( <C> , <D> )	<B> を最後から <C> で最大分割数 <D> まで分割してリストを返して、 <A> に代入する
<A> = <B> . rsplit ( <C> , <D> )	<B> を最後から <C> で最大分割数 <D> まで分割してリストを返した結果を <A> にする
<A> . rsplit ( <B> , <C> )	<B> を区切り文字、最大分割数を <C> として <A> を最後から分割してリスト型にして返す
<A> = <B> . rsplit ( <C> , <D> )	<C> を区切り文字、最大分割数を <D> として <B> を最後から分割してリスト型にして返して、 <A> に代入する
<A> = <B> . rsplit ( <C> , <D> )	<C> を区切り文字、最大分割数を <D> として <B> を最後から分割してリスト型にして返された結果を <A> に代入する
<A> . replace ( <B> , <C> )	<A> 内の <B> を <C> に置き換えた文字列
<A> = <B> . replace ( <C> , <D> )	<B> 内の <C> を <D> に置き換えた文字列を <A> とする
<A> . strip ( )	<A> の両端から空白改行を除いた文字列
<A> = <B> . strip ( )	<B> の両端から空白改行を抜いた文字列を <A> にする
<A> . strip ( <B> )	<A> の両端から <B> を取り除いた文字列
<A> = <B> . strip ( <C> )	<B> の両端から <C> を抜いた文字列を <A> にする
<A> . lstrip ( )	<A> の左側から空白改行を取り除いた文字列
<A> = <B> . lstrip ( )	<B> の先頭から空白改行を取り除いた文字列を <A> に代入する
<A> . lstrip ( <B> )	<A> の左側から <B> を取り除いた文字列
<A> = <B> . lstrip ( <C> )	<B> の先頭から <C> を取り除いた文字列を <A> に代入する
<A> . rstrip ( )	<A> の終わりから空白改行を取り除いた文字列
<A> = <B> . rstrip ( )	<B> の最後から空白改行を取り除いた文字列を <A> に代入する
<A> . rstrip ( <B> )	<A> の後ろから <B> を取り除いた文字
<A> = <B> . rstrip ( <C> )	<B> の終わりから <C> を取り除いた文字を <A> にする
<A> . zfill ( <B> )	<A> を長さが <B> になるように左を '0' で埋めた文字列
<A> = <B> . zfill ( <C> )	<B> を長さが <C> になるように左を '0' で埋めた文字列を <A> とする
<A> . zfill ( <B> )	<A> を長さが <B> になるように '0' で右寄せした文字列
<A> = <B> . zfill ( <C> )	<B> を長さが <C> になるように '0' で右寄せした文字列を <A> にする
<A> . capitalize ( )	<A> の先頭を英大文字、残りを全て英小文字にした文字列
<A> = <B> . capitalize ( )	<B> の最初を英大文字、残りを全て英小文字に変換した文字列を <A> に代入する
<A> . strswap ( )	<A> の英大小文字を逆にした文字列
<A> = <B> . strswap ( )	<B> の英大小文字を逆にした文字列を <A> とする
<A> . strswap ( )	<A> の英大文字と英小文字を逆にした文字列
<A> = <B> . strswap ( )	<B> の英大文字と英小文字を交換した文字列を <A> に代入する
<A> . find ( <B> )	<A> の最初から <B> を探して見つかった位置
<A> = <B> . find ( <C> )	<B> の最初から <C> を探して見つかった位置を <A> とする
<A> . find ( <B> )	<A> 内の <B> がある位置
<A> = <B> . find ( <C> )	<B> 内の <C> がある位置を <A> にする
<A> . find ( <B> , <C> )	<A> の <C> 番目から <B> を探して見つかった位置
<A> = <B> . find ( <C> , <D> )	<B> の <D> 番目から <C> を探して見つかった位置を <A> にする
<A> . find ( <B> , <C> )	<A> 内の <C> 番目以降に <B> がある位置
<A> = <B> . find ( <C> , <D> )	<B> 内の <D> 番目以降に <C> がある位置を <A> に代入する
<A> . find ( <B> , <C> , <D> )	<A> の <C> 番目から <D> 番目の間で <B> を探して見つかった位置
<A> = <B> . find ( <C> , <D> , <E> )	<B> の <D> 番目から <E> 番目の間で <C> を探して見つかった位置を <A> にする
<A> . find ( <B> , <C> , <D> )	<A> 内の <C> 番目から <D> 番目に <B> がある位置
<A> = <B> . find ( <C> , <D> , <E> )	<B> 内の <D> 番目から <E> 番目に <C> がある位置を <A> とする
<A> . rfind ( <B> )	<A> の後ろから <B> を探して見つかった位置
<A> = <B> . rfind ( <C> )	<B> の後ろから <C> を探して見つかった位置を <A> に代入する
<A> . rfind ( <B> )	<A> 内の <B> がある後ろ側の位置
<A> = <B> . rfind ( <C> )	<B> 内の <C> がある後ろ側の位置を <A> にする
<A> . rfind ( <B> , <C> )	<A> の <C> 番目から <B> を後ろから探して見つかった位置
<A> = <B> . rfind ( <C> , <D> )	<B> の <D> 番目から <C> を後ろから探して見つかった位置を <A> に代入する
<A> . rfind ( <B> , <C> )	<A> 内の <C> 番目以降に <B> がある後ろ側の位置
<A> = <B> . rfind ( <C> , <D> )	<B> 内の <D> 番目以降に <C> がある右側の位置を <A> に代入する
<A> . rfind ( <B> , <C> , <D> )	<A> の <C> 番目から <D> 番目の間で <B> を後ろから探して見つかった位置
<A> = <B> . rfind ( <C> , <D> , <E> )	<B> の <D> 番目から <E> 番目の間で <C> を後ろから探して見つかった位置を <A> とする
<A> . rfind ( <B> , <C> , <D> )	<A> 内の <C> 番目から <D> 番目に <B> がある右側の位置
<A> = <B> . rfind ( <C> , <D> , <E> )	<B> 内の <D> 番目から <E> 番目に <C> がある後ろ側の位置を <A> にする
'' . join ( <A> )	<A> 内の要素を連結した文字列
<A> = '' . join ( <B> )	<B> 内の要素を連結した文字列を <A> とする
<A> . join ( <B> )	<A> を間に入れて <B> 内の要素を連結した文字列
<A> = <B> . join ( <C> )	<B> を間に入れて <C> 内の値を連結した文字列を <A> とする
<A> . count ( <B> )	<A> 内の <B> の出現回数
<A> . count ( <B> )	<A> 内の <B> の出現回数を見る
<A> . startswith ( <B> )	<A> の先頭が <B> で始まる{かどうか}
if <A> . startswith ( <B> ) :	もし <A> の先頭が <B> で始まる{かどうか}なら
<A> . startswith ( <B> )	<A> が <B> で始まるかどうか
if <A> . startswith ( <B> ) :	<A> が <B> で始まるなら
<A> . startswith ( <B> , <C> )	<A> の <C> 番目が <B> で始まる{かどうか}
if <A> . startswith ( <B> , <C> ) :	もし <A> の <C> 番目が <B> で始まる{かどうか}のとき
<A> . endswith ( <B> )	<A> の後ろが <B> で終わるかどうか
if <A> . endswith ( <B> ) :	<A> の末尾が <B> で終わるならば
<A> . endswith ( <B> )	<A> の後ろが <B> であるかどうか
if <A> . endswith ( <B> ) :	もし <A> の末尾が <B> であるのとき
<A> . endswith ( <B> , <C> )	<A> の <C> 番目が <B> で終わるかどうか
if <A> . endswith ( <B> , <C> ) :	もし <A> の <C> 番目が <B> で終わるの場合
<A> . isupper ( )	<A> が英大文字かどうか
if <A> . isupper ( ) :	もし <A> が英大文字のとき
<A> . isupper ( )	<A> 中の全ての文字が英大文字かどうか
if <A> . isupper ( ) :	もし <A> 中の全ての文字が英大文字のとき
<A> . isupper ( )	<A> 中の全ての英字が大文字かどうか
if <A> . isupper ( ) :	もし <A> 中の全ての英字が大文字ならば
<A> . isupper ( )	<A> 中の英字全てが大文字かどうか
if <A> . isupper ( ) :	もし <A> 中の英字全てが大文字ならば
<A> . islower ( )	<A> が英小文字かどうか
if <A> . islower ( ) :	もし <A> が英小文字のとき
<A> . islower ( )	<A> 中の全ての文字が英小文字かどうか
if <A> . islower ( ) :	もし <A> 中の全ての文字が英小文字の場合
<A> . islower ( )	<A> 中の全ての英字が小文字かどうか
if <A> . islower ( ) :	もし <A> 中の全ての英字が小文字ならば
<A> . islower ( )	<A> 中の英字全てが小文字かどうか
if <A> . islower ( ) :	もし <A> 中の英字全てが小文字の場合
<A> . isdigit ( )	<A> が数字かどうか
if <A> . isdigit ( ) :	もし <A> が数字ならば
<A> . isdigit ( )	<A> 中の全ての文字が数字かどうか
if <A> . isdigit ( ) :	<A> 中の全ての文字が数字なら
<A> . isdigit ( )	<A> 全てが数字かどうか
if <A> . isdigit ( ) :	もし <A> 全てが数字の場合
<A> . isdigit ( )	<A> が数字であるかどうか
if <A> . isdigit ( ) :	もし <A> が数字であるなら
<A> . isalpha ( )	<A> が全てアルファベットかどうか
if <A> . isalpha ( ) :	もし <A> が全てアルファベットならば
<A> . isalnum ( )	<A> が全て英数字かどうか
if <A> . isalnum ( ) :	もし <A> が全て英数字のとき
<A> . isascii ( )	<A> が全て ASCII 文字かどうか
if <A> . isascii ( ) :	もし <A> が全て ASCII 文字なら
<A> . isdecimal ( )	<A> が全て数字かどうか
if <A> . isdecimal ( ) :	もし <A> が全て数字ならば
<A> . isnumeric ( )	<A> が全て数字かどうか
if <A> . isnumeric ( ) :	もし <A> が全て数字ならば
<A> . isidentifier ( )	<A> が識別子として利用可能かどうか
if <A> . isidentifier ( ) :	もし <A> が識別子として利用可能なら
<A> . isprintable ( )	<A> が印字可能かどうか
if <A> . isprintable ( ) :	もし <A> が印字可能なら
set ( )	空のセット
<A> = set ( )	空の集合を <A> に代入する
set ( )	空集合
<A> = set ( )	空集合を <A> に代入する
set ( <A> )	<A> のセット
<A> = set ( <B> )	<B> の集合を <A> とする
<A> . add ( <B> )	<A> に <B> を追加する
<A> . remove ( <B> )	<A> から <B> を取り除く
<A> . union ( <B> )	<A> と <B> の和集合
<A> . union ( <B> )	<A> と <B> の和集合を計算する
<A> . union ( <B> )	<A> と <B> の和集合を抽出する
<A> . intersection ( <B> )	<A> と <B> の積集合
<A> . intersection ( <B> )	<A> と <B> の積集合を算出する
<A> . intersection ( <B> )	<A> と <B> の積集合を得る
<A> . intersection ( <B> )	<A> と <B> の積集合
<A> . intersection ( <B> )	<A> と <B> の共通部分を求める
<A> . intersection ( <B> )	<A> と <B> の共通部分を得る
<A> . difference ( <B> )	<A> と <B> の差集合
<A> . difference ( <B> )	<A> と <B> の差集合を計算する
<A> . difference ( <B> )	<A> と <B> の差集合を得る
<A> . symmetric_difference ( <B> )	<A> と <B> の対称差集合
<A> . symmetric_difference ( <B> )	<A> と <B> の対称差を計算する
<A> . symmetric_difference ( <B> )	<A> と <B> の対称差集合をえる
<A> . issubset ( <B> )	<A> が <B> の部分集合かどうか
if <A> . issubset ( <B> ) :	もし <A> が <B> の部分集合なら
<A> . issuperset ( <B> )	<A> が <B> の上位集合かどうか
if <A> . issuperset ( <B> ) :	もし <A> が <B> の上位集合ならば
<A> . isdisjoint ( <B> )	<A> が <B> と互いに素かどうか
if <A> . isdisjoint ( <B> ) :	<A> が <B> と互いに素の場合
<A> . isdisjoint ( <B> )	<A> と <B> が互いに素かどうか
if <A> . isdisjoint ( <B> ) :	もし <A> と <B> が互いに素なら
frozenset ( )	イミュータブルなセット
<A> = frozenset ( )	イミュータブルなセットを <A> にする
frozenset ( <A> )	<A> のイミュータブルなセット
<A> = frozenset ( <B> )	<B> のイミュータブルなセットを <A> とする
breakpoint ( )	デバッガーを起動する
globals	グローバル変数の辞書
locals	ローカル変数の辞書
import <A>	<A> モジュールをインポートする
random . random ( )	0.0 〜 1.0 の乱数
random . random ( )	0.0 以上 1.0 未満の乱数
random . randrange ( <A> )	0 から <A> 未満までの整数乱数
<A> = random . randrange ( <B> )	0 から <B> 未満までの整数乱数を <A> とする
random . randrange ( <A> )	<A> 未満までの整数乱数
<A> = random . randrange ( <B> )	<B> 未満までの整数乱数を <A> とする
random . randrange ( <A> , <B> )	<A> から <B> 未満までの整数乱数
<A> = random . randrange ( <B> , <C> )	<B> から <C> 未満までの整数乱数を <A> とする
random . randrange ( <A> , <B> )	<A> 以上 <B> 未満までの整数乱数
<A> = random . randrange ( <B> , <C> )	<B> 以上 <C> 未満までの整数乱数を <A> に代入する
random . randint ( <A> , <B> )	<A> 以上 <B> 以下の整数乱数
<A> = random . randint ( <B> , <C> )	<B> 以上 <C> 以下の整数乱数を <A> に代入する
random . seed ( <A> )	乱数シードを <A> に固定する
random . seed ( <A> )	乱数シードを <A> として乱数生成器を初期化する
random . choice ( <A> )	<A> からランダムに要素をチョイスする
random . sample ( <A> , <B> )	<A> からランダムに要素を <B> つチョイスする
random . shuffle ( <A> )	<A> をランダムにシャッフルする
import <A>	<A> モジュールをインポートする
math . sqrt ( <A> )	<A> の平方根
math . sqrt ( <A> )	<A> の平方根を表示する
math . sqrt ( <A> )	<A> の平方根を算出する
<A> = math . sqrt ( <B> )	<B> の平方根を <A> に代入する
math . sqrt ( <A> )	<A> のルート
math . sqrt ( <A> )	<A> のルートを調べる
math . sqrt ( <A> )	<A> のルートを求める
<A> = math . sqrt ( <B> )	<B> のルートを <A> に代入する
math . ceil ( <A> )	<A> の小数点以下切り上げ
math . ceil ( <A> )	<A> の切り上げを調べる
math . ceil ( <A> )	<A> の切り上げを計算する
<A> = math . ceil ( <B> )	<B> の切り上げを <A> にする
math . ceil ( <A> )	<A> を最も近い数値に切り上げ
math . ceil ( <A> )	<A> を最も近い整数に切り上げを調べる
math . ceil ( <A> )	<A> を最も近い整数に切り上げを算出する
<A> = math . ceil ( <B> )	<B> を最も近い整数に切り上げを <A> にする
math . ceil ( <A> )	<A> に最も近い数値に切り上げ
math . ceil ( <A> )	<A> に最も近い数値に切り上げを調べる
math . ceil ( <A> )	<A> に最も近い整数に切り上げを計算する
<A> = math . ceil ( <B> )	<B> に最も近い整数に切り上げを <A> に代入する
math . floor ( <A> )	<A> の小数点以下切り捨て
math . floor ( <A> )	<A> の切り捨てを表示する
math . floor ( <A> )	<A> の小数点以下切り捨てを算出する
<A> = math . floor ( <B> )	<B> の小数点以下切り捨てを <A> にする
math . floor ( <A> )	<A> を最も近い整数に切り捨て
math . floor ( <A> )	<A> を最も近い整数に切り捨てを調べる
math . floor ( <A> )	<A> を最も近い整数に切り捨てを算出する
<A> = math . floor ( <B> )	<B> を最も近い整数に切り捨てを <A> に代入する
math . floor ( <A> )	<A> に最も近い整数に切り捨て
math . floor ( <A> )	<A> に最も近い整数に切り捨てを見る
math . floor ( <A> )	<A> に最も近い整数に切り捨てを求める
<A> = math . floor ( <B> )	<B> に最も近い整数に切り捨てを <A> に代入する
math . gcd ( <A> , <B> )	<A> と <B> の最大公約数
math . gcd ( <A> , <B> )	<A> と <B> の最大公約数をチェックする
math . gcd ( <A> , <B> )	<A> と <B> の最大公約数を計算する
<A> = math . gcd ( <B> , <C> )	<B> と <C> の最大公約数を <A> にする
math . lcm ( <A> , <B> )	<A> と <B> の最小公倍数
math . lcm ( <A> , <B> )	<A> と <B> の最小公倍数を見る
math . lcm ( <A> , <B> )	<A> と <B> の最小公倍数を計算する
<A> = math . lcm ( <B> , <C> )	<B> と <C> の最小公倍数を <A> とする
math . comb ( <A> , <B> )	<A> と <B> の組み合わせ
math . comb ( <A> , <B> )	<A> と <B> の組み合わせを確認する
math . comb ( <A> , <B> )	<A> と <B> のコンビネーションを算出する
<A> = math . comb ( <B> , <C> )	<B> と <C> のコンビネーションを <A> に代入する
math . copysign ( <A> , <B> )	<B> の符号を持った <A>
math . copysign ( <A> , <B> )	<B> の符号を持った <A> を確認する
math . copysign ( <A> , <B> )	<B> の符号を持った <A> を求める
<A> = math . copysign ( <B> , <C> )	<C> の符号を持った <B> を <A> とする
math . copysign ( <A> , <B> )	<A> を <B> の符号にした値
math . copysign ( <A> , <B> )	<A> を <B> の符号にした値を見る
math . copysign ( <A> , <B> )	<A> を <B> の符号にした値を計算する
<A> = math . copysign ( <B> , <C> )	<B> を <C> の符号にした値を <A> とする
math . fabs ( <A> )	<A> の絶対値
math . fabs ( <A> )	<A> の絶対値を表示する
math . fabs ( <A> )	<A> の絶対値を求める
<A> = math . fabs ( <B> )	<B> の絶対値を <A> にする
math . factorial ( <A> )	<A> の階乗
math . factorial ( <A> )	<A> の階乗を調べる
math . factorial ( <A> )	<A> の階乗を計算する
<A> = math . factorial ( <B> )	<B> の階乗を <A> にする
math . frexp ( <A> )	<A> の仮数と指数
math . frexp ( <A> )	<A> の仮数と指数を調べる
math . frexp ( <A> )	<A> の仮数と指数を求める
math . isclose ( <A> , <B> )	<A> と <B> が近いかどうか
math . isclose ( <A> , <B> )	<A> と <B> が近いかどうかを調べる
math . isclose ( <A> , <B> )	<A> と <B> が近いかどうかを求める
if math . isclose ( <A> , <B> ) :	もし <A> と <B> が近いとき
math . isclose ( <A> , <B> )	<A> と <B> が近似値かどうか
math . isclose ( <A> , <B> )	<A> と <B> が近似値かどうかを確認する
math . isclose ( <A> , <B> )	<A> と <B> が近似値かどうかを求める
if math . isclose ( <A> , <B> ) :	もし <A> と <B> が近似値の場合
math . isfinite ( <A> )	<A> が有限かどうか
math . isfinite ( <A> )	<A> が有限かどうかを表示する
math . isfinite ( <A> )	<A> が有限かどうかを求める
if math . isfinite ( <A> ) :	もし <A> が有限なら
math . isinf ( <A> )	<A> が無限大かどうか
math . isinf ( <A> )	<A> が無限大かどうかを確認する
math . isinf ( <A> )	<A> が無限大かどうかを算出する
if math . isinf ( <A> ) :	<A> が無限大の場合
math . isnan ( <A> )	<A> が NaN かどうか
math . isnan ( <A> )	<A> が NaN かどうかを見る
math . isnan ( <A> )	<A> が NaN かどうかを求める
if math . isnan ( <A> ) :	もし <A> が NaN なら
math . modf ( <A> )	<A> の小数部と整数部
math . modf ( <A> )	<A> の小数部と整数部を調べる
math . modf ( <A> )	<A> の小数部と整数部を計算する
math . perm ( <A> )	<A> の順列の総数
math . perm ( <A> )	<A> の順列の総数をチェックする
math . perm ( <A> )	<A> の順列の総数を算出する
<A> = math . perm ( <B> )	<B> の順列の総数を <A> とする
math . perm ( <A> , <B> )	<A> から <B> 個取り出した時の順列の総数
math . perm ( <A> , <B> )	<A> から <B> 個取り出した時の順列の総数を調べる
math . perm ( <A> , <B> )	<A> から <B> 個取り出した時の順列の総数を算出する
<A> = math . perm ( <B> , <C> )	<B> から <C> 個取り出した時の順列の総数を <A> とする
math . prod ( <A> )	<A> の要素積
math . prod ( <A> )	<A> の要素積を表示する
math . prod ( <A> )	<A> の要素積を算出する
<A> = math . prod ( <B> )	<B> の要素積を <A> にする
math . remainder ( <A> , <B> )	<A> を <B> で割った剰余
math . remainder ( <A> , <B> )	<A> を <B> で割った剰余を表示する
math . remainder ( <A> , <B> )	<A> を <B> で割った剰余を算出する
<A> = math . remainder ( <B> , <C> )	<B> を <C> で割った剰余を <A> に代入する
math . exp ( <A> )	e の <A> 乗
math . exp ( <A> )	e の <A> 乗を確認する
math . exp ( <A> )	e の <A> 乗を求める
<A> = math . exp ( <B> )	e の <B> 乗を <A> とする
math . log ( <A> )	<A> の自然対数
math . log ( <A> )	<A> の自然対数を見る
math . log ( <A> )	<A> の自然対数を計算する
<A> = math . log ( <B> )	<B> の自然対数を <A> とする
math . log ( <A> , <B> )	<B> を底とする <A> の対数
math . log ( <A> , <B> )	<B> を底とする <A> の対数を見る
math . log ( <A> , <B> )	<B> を底とする <A> の対数を計算する
<A> = math . log ( <B> , <C> )	<C> を底とする <B> の対数を <A> にする
math . log ( <A> , <B> )	<B> に対する <A> の対数
math . log ( <A> , <B> )	<B> に対する <A> の対数をチェックする
math . log ( <A> , <B> )	<B> に対する <A> の対数を計算する
<A> = math . log ( <B> , <C> )	<C> に対する <B> の対数を <A> に代入する
math . log1p ( <A> )	1 + <A> の自然対数
math . log1p ( <A> )	1 + <A> の自然対数を見る
math . log1p ( <A> )	1 + <A> の自然対数を計算する
<A> = math . log1p ( <B> )	1 + <B> の自然対数を <A> に代入する
math . log2 ( <A> )	2 を底とする <A> の対数
math . log2 ( <A> )	2 を底とする <A> の対数を表示する
math . log2 ( <A> )	2 を底とする <A> の対数を算出する
<A> = math . log2 ( <B> )	2 を底とする <B> の対数を <A> とする
math . log10 ( <A> )	<A> の常用対数
math . log10 ( <A> )	<A> の常用対数を表示する
math . log10 ( <A> )	<A> の常用対数を求める
<A> = math . log10 ( <B> )	<B> の常用対数を <A> とする
math . log10 ( <A> )	<A> の 10 を底とする対数
math . log10 ( <A> )	<A> の 10 を底とする対数を表示する
math . log10 ( <A> )	<A> の 10 を底とする対数を求める
<A> = math . log10 ( <B> )	<B> の 10 を底とする対数を <A> とする
math . cos ( <A> )	<A> の余弦
math . cos ( <A> )	<A> の余弦をチェックする
math . cos ( <A> )	<A> の余弦を計算する
<A> = math . cos ( <B> )	<B> の余弦を <A> にする
math . cos ( <A> )	<A> のコサイン
math . cos ( <A> )	<A> のコサインをチェックする
math . cos ( <A> )	<A> のコサインを計算する
<A> = math . cos ( <B> )	<B> のコサインを <A> にする
math . sin ( <A> )	<A> の正弦
math . sin ( <A> )	<A> の正弦を調べる
math . sin ( <A> )	<A> の正弦を求める
<A> = math . sin ( <B> )	<B> の正弦を <A> に代入する
math . sin ( <A> )	<A> のサイン
math . sin ( <A> )	<A> のサインを表示する
math . sin ( <A> )	<A> のサインを計算する
<A> = math . sin ( <B> )	<B> のサインを <A> に代入する
math . tan ( <A> )	<A> の正接
math . tan ( <A> )	<A> の正接をチェックする
math . tan ( <A> )	<A> の正接を算出する
<A> = math . tan ( <B> )	<B> の正接を <A> に代入する
math . tan ( <A> )	<A> のタンジェント
math . tan ( <A> )	<A> のタンジェントをチェックする
math . tan ( <A> )	<A> のタンジェントを算出する
<A> = math . tan ( <B> )	<B> のタンジェントを <A> とする
math . acos ( <A> )	<A> の逆余弦
math . acos ( <A> )	<A> の逆余弦を表示する
math . acos ( <A> )	<A> の逆余弦を計算する
<A> = math . acos ( <B> )	<B> の逆余弦を <A> に代入する
math . acos ( <A> )	<A> のアークコサイン
math . acos ( <A> )	<A> のアークコサインを調べる
math . acos ( <A> )	<A> のアークコサインを求める
<A> = math . acos ( <B> )	<B> のアークコサインを <A> にする
math . asin ( <A> )	<A> の逆正弦
math . asin ( <A> )	<A> の逆正弦をチェックする
math . asin ( <A> )	<A> の逆正弦を算出する
<A> = math . asin ( <B> )	<B> の逆正弦を <A> に代入する
math . asin ( <A> )	<A> のアークサイン
math . asin ( <A> )	<A> のアークサインをチェックする
math . asin ( <A> )	<A> のアークサインを求める
<A> = math . asin ( <B> )	<B> のアークサインを <A> に代入する
math . atan ( <A> )	<A> の逆正接
math . atan ( <A> )	<A> の逆正接を見る
math . atan ( <A> )	<A> の逆正接を算出する
<A> = math . atan ( <B> )	<B> の逆正接を <A> にする
math . atan ( <A> )	<A> のアークタンジェント
math . atan ( <A> )	<A> のアークタンジェントをチェックする
math . atan ( <A> )	<A> のアークタンジェントを計算する
<A> = math . atan ( <B> )	<B> のアークタンジェントを <A> にする
math . degrees ( <A> )	<A> の角度
math . degrees ( <A> )	<A> の角度をチェックする
math . degrees ( <A> )	<A> の角度を求める
<A> = math . degrees ( <B> )	<B> の角度を <A> とする
math . radians ( <A> )	<A> のラジアン
math . radians ( <A> )	<A> のラジアンをチェックする
math . radians ( <A> )	<A> のラジアンを求める
<A> = math . radians ( <B> )	<B> のラジアンを <A> に代入する
math . acosh ( <A> )	<A> の逆双曲線余弦
math . acosh ( <A> )	<A> の逆双曲線余弦を見る
math . acosh ( <A> )	<A> の逆双曲線余弦を求める
<A> = math . acosh ( <B> )	<B> の逆双曲線余弦を <A> にする
math . asinh ( <A> )	<A> の逆双曲線正弦
math . asinh ( <A> )	<A> の逆双曲線正弦を表示する
math . asinh ( <A> )	<A> の逆双曲線正弦を求める
<A> = math . asinh ( <B> )	<B> の逆双曲線正弦を <A> とする
math . atanh ( <A> )	<A> の逆双曲線正接
math . atanh ( <A> )	<A> の逆双曲線正接を確認する
math . atanh ( <A> )	<A> の逆双曲線正接を求める
<A> = math . atanh ( <B> )	<B> の逆双曲線正接を <A> に代入する
math . cosh ( <A> )	<A> の双曲線余弦
math . cosh ( <A> )	<A> の双曲線余弦を見る
math . cosh ( <A> )	<A> の双曲線余弦を求める
<A> = math . cosh ( <B> )	<B> の双曲線余弦を <A> にする
math . sinh ( <A> )	<A> の双曲線正弦
math . sinh ( <A> )	<A> の双曲線正弦を見る
math . sinh ( <A> )	<A> の双曲線正弦を求める
<A> = math . sinh ( <B> )	<B> の双曲線正弦を <A> にする
math . tanh ( <A> )	<A> の双曲線正接
math . tanh ( <A> )	<A> の双曲線正接を表示する
math . tanh ( <A> )	<A> の双曲線正接を求める
<A> = math . tanh ( <B> )	<B> の双曲線正接を <A> とする
math . dist ( <A> , <B> )	<A> と <B> のユークリッド距離
math . dist ( <A> , <B> )	<A> と <B> のユークリッド距離を確認する
math . dist ( <A> , <B> )	<A> と <B> のユークリッド距離を求める
<A> = math . dist ( <B> , <C> )	<B> と <C> のユークリッド距離を <A> にする
math . hypot ( <A> , <B> )	<A> と <B> のノルム
math . hypot ( <A> , <B> )	<A> と <B> のノルムをチェックする
math . hypot ( <A> , <B> )	<A> と <B> のノルムを求める
<A> = math . hypot ( <B> , <C> )	<B> と <C> のノルムを <A> に代入する
math . hypot ( <A> , <B> )	原点からの ( <A> , <B> ) の距離
math . hypot ( <A> , <B> )	原点からの ( <A> , <B> ) の距離を見る
math . hypot ( <A> , <B> )	原点からの ( <A> , <B> ) の距離を算出する
<A> = math . hypot ( <B> , <C> )	原点からの ( <B> , <C> ) の距離を <A> に代入する
math . gamma ( <A> )	<A> のガンマ関数
math . gamma ( <A> )	<A> のガンマ関数を表示する
math . gamma ( <A> )	<A> のガンマ関数を算出する
<A> = math . gamma ( <B> )	<B> のガンマ関数を <A> とする
math . lgamma ( <A> )	<A> のガンマ関数の絶対値の自然対数
math . lgamma ( <A> )	<A> のガンマ関数の絶対値の自然対数を見る
math . lgamma ( <A> )	<A> のガンマ関数の絶対値の自然対数を求める
<A> = math . lgamma ( <B> )	<B> のガンマ関数の絶対値の自然対数を <A> に代入する
math . pi	円周率
math . pi	円周率をチェックする
math . pi	円周率を算出する
math . e	ネイピア数
math . e	ネイピア数を確認する
math . e	ネイピア数を算出する
math . inf	無限大
math . inf	無限大を確認する
math . inf	無限大を算出する
math . nan	NaN
math . nan	NaN を確認する
math . nan	NaN を算出する
import <A>	<A> モジュールをインポートする
copy . copy ( <A> )	<A> をコピーした結果
copy . deepcopy ( <A> )	<A> を深くコピーした結果
import <A>	<A> モジュールをインポートする
bisect . bisect_left ( <A> , <B> )	ソートされた順序を保ったまま <B> を <A> に挿入できる位置
bisect . bisect_right ( <A> , <B> )	ソートされた順序を保ったまま <B> を <A> に挿入できる最後の位置
bisect . insort_left ( <A> , <B> )	<B> を <A> にソート順で挿入する
bisect . insort_right ( <A> , <B> )	<B> を <A> にソート順で最後に挿入する
import <A>	<A> モジュールをインポートする
itertools . repeat ( <A> )	<A> の無限列
itertools . repeat ( <A> , <B> )	<A> の <B> 回続く列
itertools . count ( )	無限にカウントアップする整数列
itertools . count ( <A> )	<A> からカウントアップする無限の整数列
itertools . count ( <A> , <B> )	<A> から始まり <B> 間隔でカウントアップする無限の整数列
itertools . cycle ( <A> )	<A> を無限に繰り返した列
itertools . product ( <A> , <B> )	<A> と <B> の直積
itertools . permutations ( <A> )	<A> の順列
itertools . permutations ( <A> , <B> )	<A> のうち <B> 個までの順列
itertools . combinations ( <A> , <B> )	<A> のうち <B> 個までの組み合わせ
itertools . combinations_with_replacement ( <A> , <B> )	<A> のうち <B> 個までの重複組み合わせ
import <A>	<A> モジュールを用いる
collections . deque ( )	deque オブジェクトを作る
<A> = collections . deque ( )	deque オブジェクトを作成し、 <A> に代入する
<A> = collections . deque ( )	deque オブジェクトを作成した結果を <A> とする
collections . deque ( <A> )	<A> から deque オブジェクトを作成する
<A> = collections . deque ( <B> )	<B> から deque オブジェクトを作成して、 <A> に代入する
<A> = collections . deque ( <B> )	<B> から deque オブジェクトを作成した結果を <A> とする
maxlen = <A>	<A> を最大長として
<A> . appendleft ( <B> )	<A> の左側に <B> を追加する
<A> . appendleft ( <B> )	<A> の最初を <B> で拡張する
<A> . popleft ( )	<A> の先頭から取り除いた値
<A> . rotate ( )	<A> の要素を右にひとつローテート直す
<A> . rotate ( <B> )	<A> の要素を右に <B> つずつローテートする
collections . Counter ( <A> )	<A> の辞書カウンタ
<A> = collections . Counter ( <B> )	<B> の辞書カウンタを <A> とする
<A> . most_common ( )	<A> の出現回数順の列
<A> . most_common ( <B> )	<A> の上位 <B> 位までの出現回数順の列
import <A>	<A> モジュールをインポートする
os . sep	ファイルパスのセパレータ記号
os . getcwd	現在の作業ディレクトリ
os . system	コマンド
os . path . basename ( <A> )	パス文字列 <A> のファイル名
os . path . dirname ( <A> )	パス <A> のディレクトリ名
os . path . abspath ( <A> )	パス文字列 <A> の絶対ファイルパス
os . path . split ( <A> )	パス文字列 <A> のディレクトリ名とファイル名
os . path . join ( <A> , <B> , <C> )	<A> と <B> と <C> を連結したファイルパス
os . path . splitext ( <A> )	パス文字列 <A> のファイル名と拡張子
os . path . get_size ( <A> )	パス文字列 <A> のファイルの大きさ
import <A>	<A> モジュールをインポートする
sys . exit ( )	プログラムを終了する
import <A>	<A> モジュールをインポートする
datetime . datetime . now ( )	現在の日時
datetime . datetime ( <A> , <B> , <C> )	<A> 年 <B> 月 <C> 日の日時
datetime . datetime ( <A> , <B> , <C> , <D> , <E> )	<A> 年 <B> 月 <C> 日 <D> 時 <E> 分の日時
datetime . datetime ( <A> , <B> , <C> , <D> , <E> , <F> )	<A> 年 <B> 月 <C> 日 <D> 時 <E> 分 <F> 秒の日時
re . search ( <A> , <B> )	<B> において正規表現 <A> のパターンが最初にマッチする位置
re . match ( <A> , <B> )	<B> の先頭に正規表現 <A> のパターンをマッチさせた結果
re . fullmatch ( <A> , <B> )	<B> 全体において正規表現 <A> のパターンをマッチさせた結果
re . split ( <A> , <B> )	<B> を正規表現 <A> のパターンにマッチした箇所で分割した文字列リスト
re . sub ( <A> , <B> , <C> )	<C> 内の正規表現 <A> のパターンにマッチした箇所を <B> に置き換えた文字列
re . subn ( <A> , <B> , <C> )	<C> 内の正規表現 <A> のパターンにマッチした箇所を <B> に置き換えた文字列と置き換えた箇所の数
re . findall ( <A> , <B> )	<B> が正規表現 <A> のパターンにマッチした文字列のリスト
re . compile ( <A> )	<A> を正規表現にコンパイルした結果
